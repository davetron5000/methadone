#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'
require 'methadone'
require 'methadone/cli'

include FileUtils
include Methadone::Main
include Methadone::CLILogging
include Methadone::CLI
include Methadone::SH

main do |app_name|
  check_and_prepare_basedir!(app_name,options[:force])
  using_readme = options[:readme]

  gemname = File.basename(app_name)
  module_name = gemname.split(/_/).map(&:capitalize).join('')

  debug "Creating project for gem #{gemname}"

  chdir File.dirname(app_name)

  sh! "bundle gem #{gemname}"

  chdir gemname

  template_dirs_in(:full).each { |dir| mkdir_p dir }
  copy_file "lib/gemname.rb", :from => :full, :as => "#{gemname}.rb", :binding => binding
  copy_file "lib/gemname/error.rb", :from => :full, :binding => binding
  copy_file "lib/gemname/version.rb", :from => :full, :binding => binding
  File.open("VERSION", 'w') { |file| file.puts "0.0.1" }
  # Hack
  Dir["lib/gemname/*"].each { |entry| mv entry, "lib/#{gemname}" }
  rmdir "lib/gemname"
  %w(core_ext util).each { |dir| mkdir_p "lib/#{gemname}/#{dir}" }

  rspec = options[:rspec]

  yard = options[:yard]

  [
    "Rakefile",
    ".gitignore",
    ".rspec",
    ".rvmrc",
    ".travis.yml",
    "features/support/env.rb"
  ].each { |file| copy_file file, :binding => binding }

  if rspec
    template_dirs_in(:rspec).each  { |dir| mkdir_p dir }
    copy_file "spec/tc_something_spec.rb", :from => :rspec, :as => "#{gemname}_spec.rb", :binding => binding
    copy_file "spec/spec_helper.rb", :from => :rspec, :binding => binding
    # Hack
    Dir["spec/gemname/*"].each { |entry| mv entry, "spec/#{gemname}" }
    rmdir "spec/gemname"
    %w(core_ext util).each { |dir| mkdir_p "spec/#{gemname}/#{dir}" }
  else
    template_dirs_in(:test_unit).each  { |dir| mkdir_p dir }
    copy_file "test/tc_something.rb", :from => :test_unit, :as => "#{gemname}_spec.rb", :binding => binding
    %w(core_ext util).each { |dir| mkdir_p "test/#{gemname}/#{dir}" }
  end

  license = options[:license]
  warn "warning: your app has no license" unless license
  license = nil if license == 'NONE'
  copy_file "#{options[:license]}_LICENSE.txt", :as => "LICENSE.txt" if license

  copy_file "features/executable.feature", :as => "#{gemname}.feature", :binding => binding

  copy_file "README.md.erb", :binding => binding if using_readme

  copy_file "features/executable.feature", :as => "#{gemname}.feature", :binding => binding
  copy_file "features/step_definitions/executable_steps.rb", :as => "#{gemname}_steps.rb"
  copy_file "bin/executable", :as => gemname, :executable => true, :binding => binding

  gem_variable = File.open("#{gemname}.gemspec") { |x| x.read }.match(/(\w+)\.executables/)[1]
  add_to_file "#{gemname}.gemspec", [
    "  #{gem_variable}.post_install_message = \"Thanks for installing\"",
    "  #{gem_variable}.add_development_dependency('rdoc')",
    "  #{gem_variable}.add_development_dependency('aruba')",
    "  #{gem_variable}.add_development_dependency('rake','~> 0.9.2')",
    "  #{gem_variable}.add_dependency('methadone', '~>#{Methadone::VERSION}')",
    "  #{gem_variable}.add_development_dependency('simplecov')",
    "  #{gem_variable}.add_development_dependency('version')",
    "  ##{gem_variable}.add_development_dependency('pry')",
    "  ##{gem_variable}.add_development_dependency('webmock')",
    "  ##{gem_variable}.add_development_dependency('vcr')",
  ], :before => /^end\s*$/

  if rspec
    add_to_file "#{gemname}.gemspec", [
      "  #{gem_variable}.add_dependency('rspec')",
    ], :before => /^end\s*$/
  else
  end

  if yard
    add_to_file "#{gemname}.gemspec", [
      "  #{gem_variable}.add_dependency('yard')",
      "  #{gem_variable}.add_dependency('redcarpet')",
    ], :before => /^end\s*$/
  end

  puts %x[git add .]
  puts %x[git commit -m "Initial commit"]
  puts %x[git checkout -b dev]
end

options[:readme] = true

description "Kick the bash habit by bootstrapping your Ruby command-line apps"

on("--force","Overwrite files if they exist")
on("--[no-]readme","[Do not ]produce a README file")
on("--rspec", "Generate RSpec unit tests instead of Test::Unit")
on("--yard", "Generate YARD doc instead of RDoc")

licenses = %w(mit apache custom NONE)
on("-l LICENSE","--license",licenses,"Specify the license for your project",'(' + licenses.join('|') + ')')

use_log_level_option

arg :app_name, :required, "Name of your app, which is used for the gem name and executable name"

version Methadone::VERSION

go!

